1.**贝斯家族**

复制密文使用随波逐流直接解密，发现是base91编码，然后使用base91解密的在线网站验证确实是

解出得到flag{554a5058c9021c76}

2.**.!?**

下载附件后到[https://www.splitbrain.org/services/ook](https://www.splitbrain.org/services/ook)这个网址直接解密就可以，

解出得到flag{bugku_jiami}

3. **[SWPU 2024 新生引导]密码学？类魂？  **

看见前有隐藏道路往前翻，找到题目，在文档末尾发现提示，摩斯密码，根据提示把acemnorsuvwxz换成（.）,把bdfghijklpqtyABCDEFGHIJKLMNOPQRSTUVWXYZ换成(-),简单使用脚本即可，然后得出摩斯密码-.. .- -. -- -....- -.-- --- ..- -....- -.- -. --- .-- .... .- - -....- .. -....- .- -- -....- ... .- -.-- -....- -... --- --- .-.使用摩斯密码解密脚本直接解密即可得到明文DANM-YOU-KNOWHAT-I-AM-SAY-BOOR，符号包裹即可得到flag

```python
a="How at to by becamt drip fit cat Caurch get to hit all come at i becamt am pencal oi by forest van at dall becomt love fit hit ats"
b="acemnorsuvwxz"
c="bdfghijklpqtyABCDEFGHIJKLMNOPQRSTUVWXYZ"
d=""
for i in a:
    if i in b:
        d+="."
    elif i in c:
        d+="-"
    else:
        d+=" "
print(d)            
```

4.rsa

刚开始不会写，知道听课之后才发现自己的问题在哪里，我一直以为欧拉函数就是(p-1)*(q-1),并没有意识到n的式子会影响欧拉函数的值，然后直接就把p和q带进去了，导致解不出来，知道这个后就比较容易了，2222222**xmodp=1，那么x等于p的欧拉函数也就是p-1，x又要是2024的倍数，猜测x等于（p-1）*2024 然后直接使用脚本就可以得到flag

完整脚本：

```python
from Crypto.Util.number import *
import gmpy2
#import libnum
#from secret import flag,gen_x

q = 13345672330679418443866848695749753384841350112452462690350565885192764753702964893062035116023096943358384379827500462723016224486435032522188166109529147
n = 4663711063632671446966617442890809468548735750386480905820144168615122369358088158709822723959108989276525102755551604204514586528122441075489492157644479194671784485228731421500391142158401889177506319977349707503678947872777602384171260874359045585814189677748712566088220734735479518470883541166059233676170283938881683675790979128058243582825012415020019043126740915522571217495119060031729061070896580899732991209113679151755713858497630999746612658308778711613697038750661479517187094033129979714688161348844542070263109259258937863241431480105798790363889436471998002323269704182369356300287043940743500087239
e = 65537
c = 130786470376510574523375214750425379158295834274599623287489104754006722808813934649176036178388384067040193592649530105616936502820754287181603236628515196039127654904821658246733136456930406056872602293196688418567911273536308460830968089020333890938433498027999776649550430971075113105774746267287227423835489272079766252409466100280571708298183082455075262759188421696753973647291264202685210088722673476268052692898681411789528976771007801550057078948950801205448228285783891241028681699434578897042694309109412171880394647978999519549451748870278523924392331514507178961276905501982709308644563098637335538179

k1=n//q
p=gmpy2.iroot(k1,3)[0]
phi=(p**3-p**2)*(q-1)
d=gmpy2.invert(e,phi)
x=(p-1)*2024
m1=pow(c,d,n)
m=m1^x
print(long_to_bytes(m))

```

